import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import {\n  ArrowsRightLeftIcon,\n  BoltIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ClockIcon,\n} from '@heroicons/react/24/outline';\n\ninterface Activity {\n  id: string;\n  type: 'rebalance' | 'threshold' | 'system' | 'error';\n  title: string;\n  description: string;\n  timestamp: Date;\n  status: 'completed' | 'pending' | 'failed';\n  txHash?: string;\n  amount?: string;\n  chain?: string;\n}\n\nconst RecentActivity: React.FC = () => {\n  const [activities, setActivities] = useState<Activity[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    generateMockActivities();\n    const interval = setInterval(addRandomActivity, 45000); // Add activity every 45 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  const generateMockActivities = () => {\n    const mockActivities: Activity[] = [\n      {\n        id: '1',\n        type: 'rebalance',\n        title: 'Portfolio Rebalanced',\n        description: 'ETH → USDC conversion executed',\n        timestamp: new Date(Date.now() - 1200000), // 20 minutes ago\n        status: 'completed',\n        txHash: '0x1234...5678',\n        amount: '2.5 ETH',\n        chain: 'Ethereum',\n      },\n      {\n        id: '2',\n        type: 'threshold',\n        title: 'Price Threshold Detected',\n        description: 'ETH price dropped 12.5%',\n        timestamp: new Date(Date.now() - 1260000), // 21 minutes ago\n        status: 'completed',\n        chain: 'Reactive',\n      },\n      {\n        id: '3',\n        type: 'system',\n        title: 'Cross-Chain Sync',\n        description: 'Arbitrum treasury synchronized',\n        timestamp: new Date(Date.now() - 3600000), // 1 hour ago\n        status: 'completed',\n        chain: 'Arbitrum',\n      },\n      {\n        id: '4',\n        type: 'rebalance',\n        title: 'Portfolio Rebalanced',\n        description: 'USDC → ETH conversion executed',\n        timestamp: new Date(Date.now() - 7200000), // 2 hours ago\n        status: 'completed',\n        txHash: '0x9876...3210',\n        amount: '5000 USDC',\n        chain: 'Ethereum',\n      },\n      {\n        id: '5',\n        type: 'system',\n        title: 'System Monitoring Active',\n        description: 'All price feeds operational',\n        timestamp: new Date(Date.now() - 10800000), // 3 hours ago\n        status: 'completed',\n        chain: 'Reactive',\n      },\n    ];\n\n    setActivities(mockActivities);\n    setIsLoading(false);\n  };\n\n  const addRandomActivity = () => {\n    const activityTypes = [\n      {\n        type: 'threshold' as const,\n        title: 'Price Threshold Monitored',\n        description: `ETH price: $${(2000 + Math.random() * 400).toFixed(0)}`,\n      },\n      {\n        type: 'system' as const,\n        title: 'Health Check',\n        description: 'All systems operational',\n      },\n      {\n        type: 'rebalance' as const,\n        title: 'Rebalance Opportunity',\n        description: 'Market conditions analyzed',\n      },\n    ];\n\n    const randomActivity = activityTypes[Math.floor(Math.random() * activityTypes.length)];\n    const chains = ['Reactive', 'Ethereum', 'Arbitrum'];\n\n    const newActivity: Activity = {\n      id: Date.now().toString(),\n      type: randomActivity.type,\n      title: randomActivity.title,\n      description: randomActivity.description,\n      timestamp: new Date(),\n      status: 'completed',\n      chain: chains[Math.floor(Math.random() * chains.length)],\n    };\n\n    setActivities(prev => [newActivity, ...prev.slice(0, 9)]); // Keep only 10 most recent\n  };\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'rebalance':\n        return ArrowsRightLeftIcon;\n      case 'threshold':\n        return ExclamationTriangleIcon;\n      case 'system':\n        return BoltIcon;\n      default:\n        return ClockIcon;\n    }\n  };\n\n  const getActivityColor = (type: string) => {\n    switch (type) {\n      case 'rebalance':\n        return 'text-reactive-400 bg-reactive-500/10';\n      case 'threshold':\n        return 'text-warning-400 bg-warning-500/10';\n      case 'system':\n        return 'text-success-400 bg-success-500/10';\n      case 'error':\n        return 'text-danger-400 bg-danger-500/10';\n      default:\n        return 'text-gray-400 bg-gray-500/10';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircleIcon className=\"w-4 h-4 text-success-400\" />;\n      case 'pending':\n        return <div className=\"loading-spinner\" />;\n      case 'failed':\n        return <ExclamationTriangleIcon className=\"w-4 h-4 text-danger-400\" />;\n      default:\n        return null;\n    }\n  };\n\n  const formatTimeAgo = (timestamp: Date) => {\n    const diff = Date.now() - timestamp.getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n\n    if (days > 0) {\n      return `${days}d ago`;\n    } else if (hours > 0) {\n      return `${hours}h ago`;\n    } else if (minutes > 0) {\n      return `${minutes}m ago`;\n    } else {\n      return 'Just now';\n    }\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"text-lg font-semibold text-gray-100\">Recent Activity</h3>\n      </div>\n\n      <div className=\"space-y-4 max-h-96 overflow-y-auto scrollbar-hide\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"loading-spinner\" />\n          </div>\n        ) : (\n          activities.map((activity, index) => {\n            const Icon = getActivityIcon(activity.type);\n            const colorClasses = getActivityColor(activity.type);\n\n            return (\n              <motion.div\n                key={activity.id}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: index * 0.1 }}\n                className=\"flex items-start space-x-3 p-3 rounded-lg hover:bg-gray-800/50 transition-colors duration-200\"\n              >\n                <div className={`p-2 rounded-lg ${colorClasses}`}>\n                  <Icon className=\"w-4 h-4\" />\n                </div>\n\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"text-sm font-medium text-gray-100 truncate\">\n                      {activity.title}\n                    </p>\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusIcon(activity.status)}\n                      <span className=\"text-xs text-gray-400\">\n                        {formatTimeAgo(activity.timestamp)}\n                      </span>\n                    </div>\n                  </div>\n\n                  <p className=\"text-sm text-gray-400 mt-1\">\n                    {activity.description}\n                  </p>\n\n                  <div className=\"flex items-center space-x-4 mt-2\">\n                    {activity.chain && (\n                      <span className=\"text-xs bg-gray-700 text-gray-300 px-2 py-1 rounded\">\n                        {activity.chain}\n                      </span>\n                    )}\n                    {activity.amount && (\n                      <span className=\"text-xs text-reactive-400 font-medium\">\n                        {activity.amount}\n                      </span>\n                    )}\n                    {activity.txHash && (\n                      <button className=\"text-xs text-gray-400 hover:text-reactive-400 transition-colors duration-200\">\n                        {activity.txHash}\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </motion.div>\n            );\n          })\n        )}\n      </div>\n\n      {activities.length === 0 && !isLoading && (\n        <div className=\"text-center py-8\">\n          <ClockIcon className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n          <p className=\"text-gray-400\">No recent activity</p>\n          <p className=\"text-sm text-gray-500 mt-1\">\n            Activity will appear here as the system operates\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RecentActivity;