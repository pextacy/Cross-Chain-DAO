import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';
import {\n  CurrencyDollarIcon,\n  ScaleIcon,\n  ChartPieIcon,\n  ArrowPathIcon,\n  ClockIcon,\n  TrendingUpIcon,\n  TrendingDownIcon\n} from '@heroicons/react/24/outline';\nimport { useContracts } from '../hooks/useContracts';\nimport { useWeb3React } from '@web3-react/core';\nimport MetricCard from './MetricCard';\n\ninterface Asset {\n  symbol: string;\n  balance: number;\n  value: number;\n  allocation: number;\n  targetAllocation: number;\n  change24h: number;\n  color: string;\n}\n\ninterface RebalanceEvent {\n  id: string;\n  timestamp: Date;\n  fromAsset: string;\n  toAsset: string;\n  amount: number;\n  reason: string;\n  txHash: string;\n}\n\nconst Portfolio: React.FC = () => {\n  const { active, chainId } = useWeb3React();\n  const { treasuryVault, isLoading } = useContracts();\n  const [assets, setAssets] = useState<Asset[]>([]);\n  const [rebalanceHistory, setRebalanceHistory] = useState<RebalanceEvent[]>([]);\n  const [portfolioMetrics, setPortfolioMetrics] = useState({\n    totalValue: 0,\n    totalGain: 0,\n    totalGainPercent: 0,\n    lastRebalance: 0,\n    rebalanceCount: 0,\n  });\n\n  useEffect(() => {\n    if (active && treasuryVault) {\n      loadPortfolioData();\n      const interval = setInterval(loadPortfolioData, 30000);\n      return () => clearInterval(interval);\n    } else {\n      generateMockData();\n    }\n  }, [active, treasuryVault]);\n\n  const loadPortfolioData = async () => {\n    try {\n      if (treasuryVault) {\n        const [totalValue, lastRebalance, rebalanceCount] = await treasuryVault.getPortfolioState();\n        \n        setPortfolioMetrics(prev => ({\n          ...prev,\n          totalValue: parseFloat(totalValue.toString()) / 1e18,\n          lastRebalance: lastRebalance.toNumber(),\n          rebalanceCount: rebalanceCount.toNumber(),\n        }));\n      }\n      \n      // Load asset data (mock for demo)\n      generateMockData();\n    } catch (error) {\n      console.error('Failed to load portfolio data:', error);\n      generateMockData();\n    }\n  };\n\n  const generateMockData = () => {\n    const mockAssets: Asset[] = [\n      {\n        symbol: 'ETH',\n        balance: 25.5,\n        value: 51000,\n        allocation: 51,\n        targetAllocation: 50,\n        change24h: 2.4,\n        color: '#627EEA'\n      },\n      {\n        symbol: 'USDC',\n        balance: 49000,\n        value: 49000,\n        allocation: 49,\n        targetAllocation: 50,\n        change24h: 0.02,\n        color: '#2775CA'\n      }\n    ];\n\n    const mockRebalanceEvents: RebalanceEvent[] = [\n      {\n        id: '1',\n        timestamp: new Date(Date.now() - 3600000),\n        fromAsset: 'ETH',\n        toAsset: 'USDC',\n        amount: 2.5,\n        reason: 'Price threshold reached (+12%)',\n        txHash: '0x1234...5678'\n      },\n      {\n        id: '2',\n        timestamp: new Date(Date.now() - 7200000),\n        fromAsset: 'USDC',\n        toAsset: 'ETH',\n        amount: 5000,\n        reason: 'Price threshold reached (-15%)',\n        txHash: '0x9876...3210'\n      },\n      {\n        id: '3',\n        timestamp: new Date(Date.now() - 86400000),\n        fromAsset: 'ETH',\n        toAsset: 'USDC',\n        amount: 1.8,\n        reason: 'Scheduled rebalancing',\n        txHash: '0x5555...7777'\n      }\n    ];\n\n    setAssets(mockAssets);\n    setRebalanceHistory(mockRebalanceEvents);\n    \n    // Calculate portfolio metrics\n    const totalValue = mockAssets.reduce((sum, asset) => sum + asset.value, 0);\n    const totalGain = totalValue * 0.08; // Mock 8% gain\n    \n    setPortfolioMetrics(prev => ({\n      ...prev,\n      totalValue,\n      totalGain,\n      totalGainPercent: 8.5,\n    }));\n  };\n\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-gray-800 border border-gray-700 rounded-lg p-3 shadow-xl\">\n          <p className=\"text-gray-300 text-sm font-medium\">{data.symbol}</p>\n          <p className=\"text-reactive-400 font-semibold\">\n            ${data.value.toLocaleString()}\n          </p>\n          <p className=\"text-xs text-gray-400\">\n            {data.allocation.toFixed(1)}% of portfolio\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const formatTimeAgo = (timestamp: Date) => {\n    const diff = Date.now() - timestamp.getTime();\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n\n    if (days > 0) {\n      return `${days}d ago`;\n    } else {\n      return `${hours}h ago`;\n    }\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        type: 'spring',\n        stiffness: 100,\n        damping: 12,\n      },\n    },\n  };\n\n  return (\n    <motion.div\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      className=\"space-y-8\"\n    >\n      {/* Header */}\n      <motion.div variants={itemVariants}>\n        <h1 className=\"text-3xl font-bold gradient-text mb-2\">\n          Portfolio Overview\n        </h1>\n        <p className=\"text-gray-400\">\n          Monitor your cross-chain treasury allocation and performance\n        </p>\n      </motion.div>\n\n      {/* Portfolio Metrics */}\n      <motion.div\n        variants={itemVariants}\n        className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\"\n      >\n        <MetricCard\n          title=\"Total Portfolio Value\"\n          value={`$${portfolioMetrics.totalValue.toLocaleString(undefined, { maximumFractionDigits: 0 })}`}\n          change={portfolioMetrics.totalGainPercent}\n          icon={CurrencyDollarIcon}\n          trend=\"up\"\n        />\n\n        <MetricCard\n          title=\"24h Gain/Loss\"\n          value={`$${portfolioMetrics.totalGain.toLocaleString(undefined, { maximumFractionDigits: 0 })}`}\n          change={portfolioMetrics.totalGainPercent}\n          icon={portfolioMetrics.totalGain >= 0 ? TrendingUpIcon : TrendingDownIcon}\n          trend={portfolioMetrics.totalGain >= 0 ? 'up' : 'down'}\n        />\n\n        <MetricCard\n          title=\"Total Rebalances\"\n          value={portfolioMetrics.rebalanceCount.toString()}\n          change={0}\n          icon={ArrowPathIcon}\n          trend=\"neutral\"\n        />\n\n        <MetricCard\n          title=\"Allocation Health\"\n          value=\"Balanced\"\n          change={0}\n          icon={ScaleIcon}\n          trend=\"up\"\n          valueColor=\"text-success-400\"\n        />\n      </motion.div>\n\n      {/* Portfolio Allocation */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Pie Chart */}\n        <motion.div variants={itemVariants}>\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h3 className=\"text-lg font-semibold text-gray-100 flex items-center space-x-2\">\n                <ChartPieIcon className=\"w-5 h-5\" />\n                <span>Asset Allocation</span>\n              </h3>\n            </div>\n\n            <div className=\"h-64 flex items-center justify-center\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={assets}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={60}\n                    outerRadius={100}\n                    paddingAngle={5}\n                    dataKey=\"value\"\n                  >\n                    {assets.map((asset, index) => (\n                      <Cell key={`cell-${index}`} fill={asset.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip content={<CustomTooltip />} />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n\n            <div className=\"mt-4 space-y-3\">\n              {assets.map((asset) => (\n                <div key={asset.symbol} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div\n                      className=\"w-3 h-3 rounded-full\"\n                      style={{ backgroundColor: asset.color }}\n                    />\n                    <span className=\"text-gray-300 font-medium\">{asset.symbol}</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-gray-100 font-semibold\">\n                      {asset.allocation.toFixed(1)}%\n                    </p>\n                    <p className=\"text-xs text-gray-400\">\n                      Target: {asset.targetAllocation}%\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Asset Details */}\n        <motion.div variants={itemVariants}>\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h3 className=\"text-lg font-semibold text-gray-100\">Asset Details</h3>\n            </div>\n\n            <div className=\"space-y-4\">\n              {assets.map((asset) => (\n                <div key={asset.symbol} className=\"p-4 bg-gray-800 rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div\n                        className=\"w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm\"\n                        style={{ backgroundColor: asset.color }}\n                      >\n                        {asset.symbol.charAt(0)}\n                      </div>\n                      <div>\n                        <p className=\"text-gray-100 font-semibold\">{asset.symbol}</p>\n                        <p className=\"text-xs text-gray-400\">\n                          Balance: {asset.balance.toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-gray-100 font-semibold\">\n                        ${asset.value.toLocaleString()}\n                      </p>\n                      <p className={`text-xs font-medium ${\n                        asset.change24h >= 0 ? 'text-success-400' : 'text-danger-400'\n                      }`}>\n                        {asset.change24h >= 0 ? '+' : ''}{asset.change24h.toFixed(2)}%\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Allocation Progress */}\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Current: {asset.allocation.toFixed(1)}%</span>\n                      <span>Target: {asset.targetAllocation}%</span>\n                    </div>\n                    <div className=\"progress-bar h-2\">\n                      <div\n                        className=\"h-full rounded-full transition-all duration-500\"\n                        style={{\n                          width: `${asset.allocation}%`,\n                          backgroundColor: asset.color\n                        }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Rebalancing History */}\n      <motion.div variants={itemVariants}>\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold text-gray-100 flex items-center space-x-2\">\n                <ClockIcon className=\"w-5 h-5\" />\n                <span>Rebalancing History</span>\n              </h3>\n              <span className=\"text-sm text-gray-400\">\n                {rebalanceHistory.length} total rebalances\n              </span>\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            {rebalanceHistory.map((event) => (\n              <motion.div\n                key={event.id}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg hover:bg-gray-700 transition-colors duration-200\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-2 bg-reactive-500/20 rounded-lg\">\n                    <ArrowPathIcon className=\"w-4 h-4 text-reactive-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-gray-100 font-medium\">\n                      {event.amount} {event.fromAsset} → {event.toAsset}\n                    </p>\n                    <p className=\"text-sm text-gray-400\">{event.reason}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm text-gray-300\">\n                    {formatTimeAgo(event.timestamp)}\n                  </p>\n                  <button className=\"text-xs text-reactive-400 hover:text-reactive-300 transition-colors\">\n                    {event.txHash}\n                  </button>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </motion.div>\n    </motion.div>\n  );\n};\n\nexport default Portfolio;