import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  EyeIcon,\n  BoltIcon,\n  ClockIcon,\n  GlobeAltIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  PlayIcon,\n  PauseIcon,\n  ArrowPathIcon\n} from '@heroicons/react/24/outline';\nimport { useContracts, useContractEvents } from '../hooks/useContracts';\nimport { useWeb3React } from '@web3-react/core';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\ninterface NetworkStatus {\n  name: string;\n  chainId: number;\n  status: 'online' | 'offline' | 'degraded';\n  latency: number;\n  lastBlock: number;\n  gasPrice: string;\n}\n\ninterface PriceFeed {\n  symbol: string;\n  price: number;\n  change24h: number;\n  threshold: number;\n  status: 'active' | 'warning' | 'triggered';\n  lastUpdate: Date;\n}\n\nconst Monitoring: React.FC = () => {\n  const { active, chainId } = useWeb3React();\n  const { priceMonitor, treasuryVault, isLoading } = useContracts();\n  const { events } = useContractEvents();\n  const [isSystemActive, setIsSystemActive] = useState(true);\n  const [networkStatuses, setNetworkStatuses] = useState<NetworkStatus[]>([]);\n  const [priceFeeds, setPriceFeeds] = useState<PriceFeed[]>([]);\n  const [gasUsageData, setGasUsageData] = useState<any[]>([]);\n  const [systemHealth, setSystemHealth] = useState({\n    overall: 95,\n    monitoring: 98,\n    execution: 92,\n    crossChain: 96\n  });\n\n  useEffect(() => {\n    initializeMonitoring();\n    const interval = setInterval(updateMonitoringData, 10000); // Update every 10 seconds\n    return () => clearInterval(interval);\n  }, [active, priceMonitor, treasuryVault]);\n\n  const initializeMonitoring = () => {\n    // Initialize network statuses\n    const networks: NetworkStatus[] = [\n      {\n        name: 'Reactive Network',\n        chainId: 5318008,\n        status: 'online',\n        latency: 120,\n        lastBlock: 1234567,\n        gasPrice: '20 Gwei'\n      },\n      {\n        name: 'Ethereum Sepolia',\n        chainId: 11155111,\n        status: 'online',\n        latency: 250,\n        lastBlock: 4567890,\n        gasPrice: '15 Gwei'\n      },\n      {\n        name: 'Arbitrum Sepolia',\n        chainId: 421614,\n        status: 'online',\n        latency: 100,\n        lastBlock: 7890123,\n        gasPrice: '0.1 Gwei'\n      }\n    ];\n\n    // Initialize price feeds\n    const feeds: PriceFeed[] = [\n      {\n        symbol: 'ETH/USD',\n        price: 2150,\n        change24h: 3.2,\n        threshold: 10,\n        status: 'active',\n        lastUpdate: new Date(Date.now() - 30000)\n      },\n      {\n        symbol: 'BTC/USD',\n        price: 43200,\n        change24h: -1.8,\n        threshold: 10,\n        status: 'active',\n        lastUpdate: new Date(Date.now() - 45000)\n      }\n    ];\n\n    // Initialize gas usage data\n    const gasData = Array.from({ length: 24 }, (_, i) => ({\n      hour: `${23 - i}h`,\n      reactive: Math.floor(Math.random() * 1000000) + 500000,\n      ethereum: Math.floor(Math.random() * 500000) + 200000,\n      arbitrum: Math.floor(Math.random() * 200000) + 50000\n    }));\n\n    setNetworkStatuses(networks);\n    setPriceFeeds(feeds);\n    setGasUsageData(gasData);\n  };\n\n  const updateMonitoringData = () => {\n    // Simulate real-time updates\n    setPriceFeeds(prev => prev.map(feed => ({\n      ...feed,\n      price: feed.price + (Math.random() - 0.5) * 50,\n      change24h: feed.change24h + (Math.random() - 0.5) * 2,\n      lastUpdate: new Date(),\n      status: Math.abs(feed.change24h) > feed.threshold ? 'triggered' : \n              Math.abs(feed.change24h) > feed.threshold * 0.8 ? 'warning' : 'active'\n    })));\n\n    setNetworkStatuses(prev => prev.map(network => ({\n      ...network,\n      latency: network.latency + (Math.random() - 0.5) * 20,\n      lastBlock: network.lastBlock + Math.floor(Math.random() * 5) + 1\n    })));\n\n    // Update system health\n    setSystemHealth(prev => ({\n      overall: Math.max(85, Math.min(99, prev.overall + (Math.random() - 0.5) * 2)),\n      monitoring: Math.max(90, Math.min(100, prev.monitoring + (Math.random() - 0.5) * 1)),\n      execution: Math.max(80, Math.min(98, prev.execution + (Math.random() - 0.5) * 3)),\n      crossChain: Math.max(85, Math.min(99, prev.crossChain + (Math.random() - 0.5) * 2))\n    }));\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'online':\n      case 'active':\n        return 'text-success-400';\n      case 'warning':\n        return 'text-warning-400';\n      case 'triggered':\n      case 'offline':\n        return 'text-danger-400';\n      case 'degraded':\n        return 'text-warning-400';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'online':\n      case 'active':\n        return <CheckCircleIcon className=\"w-4 h-4 text-success-400\" />;\n      case 'warning':\n      case 'degraded':\n        return <ExclamationTriangleIcon className=\"w-4 h-4 text-warning-400\" />;\n      case 'triggered':\n      case 'offline':\n        return <XCircleIcon className=\"w-4 h-4 text-danger-400\" />;\n      default:\n        return <ClockIcon className=\"w-4 h-4 text-gray-400\" />;\n    }\n  };\n\n  const formatTimeAgo = (timestamp: Date) => {\n    const diff = Date.now() - timestamp.getTime();\n    const seconds = Math.floor(diff / 1000);\n    const minutes = Math.floor(seconds / 60);\n    \n    if (minutes > 0) {\n      return `${minutes}m ago`;\n    } else {\n      return `${seconds}s ago`;\n    }\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        type: 'spring',\n        stiffness: 100,\n        damping: 12,\n      },\n    },\n  };\n\n  return (\n    <motion.div\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      className=\"space-y-8\"\n    >\n      {/* Header */}\n      <motion.div variants={itemVariants}>\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold gradient-text mb-2\">\n              System Monitoring\n            </h1>\n            <p className=\"text-gray-400\">\n              Real-time monitoring of cross-chain treasury automation\n            </p>\n          </div>\n          <div className=\"mt-4 sm:mt-0 flex items-center space-x-4\">\n            <button\n              onClick={() => setIsSystemActive(!isSystemActive)}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-colors duration-200 ${\n                isSystemActive\n                  ? 'bg-danger-600 hover:bg-danger-700 text-white'\n                  : 'bg-success-600 hover:bg-success-700 text-white'\n              }`}\n            >\n              {isSystemActive ? (\n                <>\n                  <PauseIcon className=\"w-4 h-4\" />\n                  <span>Pause System</span>\n                </>\n              ) : (\n                <>\n                  <PlayIcon className=\"w-4 h-4\" />\n                  <span>Start System</span>\n                </>\n              )}\n            </button>\n            <div className=\"flex items-center space-x-2\">\n              <div className={`status-dot ${\n                isSystemActive ? 'status-active' : 'status-inactive'\n              }`} />\n              <span className=\"text-sm text-gray-300\">\n                {isSystemActive ? 'Active' : 'Paused'}\n              </span>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* System Health Overview */}\n      <motion.div variants={itemVariants}>\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <h3 className=\"text-lg font-semibold text-gray-100 flex items-center space-x-2\">\n              <BoltIcon className=\"w-5 h-5\" />\n              <span>System Health</span>\n            </h3>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {Object.entries(systemHealth).map(([key, value]) => (\n              <div key={key} className=\"text-center\">\n                <div className=\"relative w-20 h-20 mx-auto mb-3\">\n                  <svg className=\"w-20 h-20 transform -rotate-90\">\n                    <circle\n                      cx=\"40\"\n                      cy=\"40\"\n                      r=\"36\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"8\"\n                      fill=\"transparent\"\n                      className=\"text-gray-700\"\n                    />\n                    <circle\n                      cx=\"40\"\n                      cy=\"40\"\n                      r=\"36\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"8\"\n                      fill=\"transparent\"\n                      strokeDasharray={`${2 * Math.PI * 36}`}\n                      strokeDashoffset={`${2 * Math.PI * 36 * (1 - value / 100)}`}\n                      className={value >= 95 ? 'text-success-400' : value >= 85 ? 'text-warning-400' : 'text-danger-400'}\n                      strokeLinecap=\"round\"\n                    />\n                  </svg>\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <span className=\"text-lg font-bold text-gray-100\">\n                      {value.toFixed(0)}%\n                    </span>\n                  </div>\n                </div>\n                <p className=\"text-sm font-medium text-gray-300 capitalize\">\n                  {key === 'crossChain' ? 'Cross-Chain' : key}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Network Status */}\n      <motion.div variants={itemVariants}>\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <h3 className=\"text-lg font-semibold text-gray-100 flex items-center space-x-2\">\n              <GlobeAltIcon className=\"w-5 h-5\" />\n              <span>Network Status</span>\n            </h3>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {networkStatuses.map((network) => (\n              <div key={network.chainId} className=\"p-4 bg-gray-800 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-medium text-gray-100\">{network.name}</h4>\n                  {getStatusIcon(network.status)}\n                </div>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Latency:</span>\n                    <span className=\"text-gray-300\">{network.latency.toFixed(0)}ms</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Last Block:</span>\n                    <span className=\"text-gray-300\">#{network.lastBlock.toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Gas Price:</span>\n                    <span className=\"text-gray-300\">{network.gasPrice}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Price Feeds Monitoring */}\n      <motion.div variants={itemVariants}>\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <h3 className=\"text-lg font-semibold text-gray-100 flex items-center space-x-2\">\n              <EyeIcon className=\"w-5 h-5\" />\n              <span>Price Feed Monitoring</span>\n            </h3>\n          </div>\n\n          <div className=\"space-y-4\">\n            {priceFeeds.map((feed) => (\n              <div key={feed.symbol} className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className={`p-2 rounded-lg ${\n                    feed.status === 'active' ? 'bg-success-500/20' :\n                    feed.status === 'warning' ? 'bg-warning-500/20' :\n                    'bg-danger-500/20'\n                  }`}>\n                    {getStatusIcon(feed.status)}\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-100\">{feed.symbol}</h4>\n                    <p className=\"text-sm text-gray-400\">\n                      Threshold: ±{feed.threshold}%\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-lg font-semibold text-gray-100\">\n                    ${feed.price.toLocaleString(undefined, { maximumFractionDigits: 2 })}\n                  </p>\n                  <p className={`text-sm font-medium ${\n                    feed.change24h >= 0 ? 'text-success-400' : 'text-danger-400'\n                  }`}>\n                    {feed.change24h >= 0 ? '+' : ''}{feed.change24h.toFixed(2)}%\n                  </p>\n                  <p className=\"text-xs text-gray-400\">\n                    Updated {formatTimeAgo(feed.lastUpdate)}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Gas Usage Chart */}\n      <motion.div variants={itemVariants}>\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <h3 className=\"text-lg font-semibold text-gray-100\">REACT Gas Usage (24h)</h3>\n          </div>\n\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={gasUsageData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                <XAxis\n                  dataKey=\"hour\"\n                  stroke=\"#9CA3AF\"\n                  fontSize={12}\n                  tickLine={false}\n                />\n                <YAxis\n                  stroke=\"#9CA3AF\"\n                  fontSize={12}\n                  tickLine={false}\n                  tickFormatter={(value) => `${(value / 1000).toFixed(0)}K`}\n                />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: '#1F2937',\n                    border: '1px solid #374151',\n                    borderRadius: '0.5rem'\n                  }}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"reactive\"\n                  stroke=\"#0ea5e9\"\n                  strokeWidth={2}\n                  name=\"Reactive\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"ethereum\"\n                  stroke=\"#627EEA\"\n                  strokeWidth={2}\n                  name=\"Ethereum\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"arbitrum\"\n                  stroke=\"#28A0F0\"\n                  strokeWidth={2}\n                  name=\"Arbitrum\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Recent Events */}\n      <motion.div variants={itemVariants}>\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold text-gray-100\">Live Events</h3>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"status-dot status-active\" />\n                <span className=\"text-sm text-gray-400\">Real-time</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-3 max-h-64 overflow-y-auto scrollbar-hide\">\n            {events.length > 0 ? (\n              events.slice(0, 10).map((event, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  className=\"flex items-start space-x-3 p-3 bg-gray-800 rounded-lg\"\n                >\n                  <div className=\"p-1 bg-reactive-500/20 rounded\">\n                    <BoltIcon className=\"w-3 h-3 text-reactive-400\" />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-gray-100\">\n                      {event.type}\n                    </p>\n                    <p className=\"text-xs text-gray-400 truncate\">\n                      Block #{event.blockNumber} • {event.transactionHash?.slice(0, 10)}...\n                    </p>\n                  </div>\n                  <span className=\"text-xs text-gray-400 whitespace-nowrap\">\n                    {formatTimeAgo(event.timestamp)}\n                  </span>\n                </motion.div>\n              ))\n            ) : (\n              <div className=\"text-center py-8\">\n                <ClockIcon className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                <p className=\"text-gray-400\">No events yet</p>\n                <p className=\"text-sm text-gray-500\">\n                  Events will appear here as the system operates\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </motion.div>\n    </motion.div>\n  );\n};\n\nexport default Monitoring;