import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  CogIcon,\n  PlusIcon,\n  PencilIcon,\n  TrashIcon,\n  PlayIcon,\n  PauseIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  KeyIcon,\n  ShieldCheckIcon\n} from '@heroicons/react/24/outline';\nimport { useContracts } from '../hooks/useContracts';\nimport { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers';\nimport toast from 'react-hot-toast';\n\ninterface PriceFeedConfig {\n  id: string;\n  symbol: string;\n  address: string;\n  chainId: number;\n  threshold: number;\n  isActive: boolean;\n}\n\ninterface TreasuryConfig {\n  chainId: number;\n  address: string;\n  gasLimit: number;\n  isActive: boolean;\n}\n\ninterface AssetConfig {\n  id: string;\n  symbol: string;\n  address: string;\n  targetAllocation: number;\n  minBalance: string;\n  isActive: boolean;\n}\n\nconst Admin: React.FC = () => {\n  const { active, account, chainId } = useWeb3React();\n  const { priceMonitor, treasuryVault, switchToReactiveNetwork, switchToChain } = useContracts();\n  const [activeTab, setActiveTab] = useState('price-feeds');\n  const [isOwner, setIsOwner] = useState(false);\n  const [systemPaused, setSystemPaused] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  // Configuration states\n  const [priceFeeds, setPriceFeeds] = useState<PriceFeedConfig[]>([]);\n  const [treasuries, setTreasuries] = useState<TreasuryConfig[]>([]);\n  const [assets, setAssets] = useState<AssetConfig[]>([]);\n\n  // Form states\n  const [newPriceFeed, setNewPriceFeed] = useState({\n    symbol: '',\n    address: '',\n    chainId: 11155111,\n    threshold: 10\n  });\n\n  const [newTreasury, setNewTreasury] = useState({\n    chainId: 11155111,\n    address: '',\n    gasLimit: 500000\n  });\n\n  const [newAsset, setNewAsset] = useState({\n    symbol: '',\n    address: '',\n    targetAllocation: 50,\n    minBalance: '0.1'\n  });\n\n  useEffect(() => {\n    if (active && account) {\n      checkOwnership();\n      loadConfigurations();\n    }\n  }, [active, account, priceMonitor, treasuryVault]);\n\n  const checkOwnership = async () => {\n    try {\n      if (priceMonitor) {\n        const owner = await priceMonitor.owner();\n        setIsOwner(owner.toLowerCase() === account?.toLowerCase());\n      }\n    } catch (error) {\n      console.error('Failed to check ownership:', error);\n      setIsOwner(false);\n    }\n  };\n\n  const loadConfigurations = async () => {\n    try {\n      // Load mock configurations (in real app, fetch from contracts)\n      const mockPriceFeeds: PriceFeedConfig[] = [\n        {\n          id: '1',\n          symbol: 'ETH/USD',\n          address: '0x694AA1769357215DE4FAC081bf1f309aDC325306',\n          chainId: 11155111,\n          threshold: 10,\n          isActive: true\n        },\n        {\n          id: '2',\n          symbol: 'BTC/USD',\n          address: '0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43',\n          chainId: 11155111,\n          threshold: 10,\n          isActive: true\n        }\n      ];\n\n      const mockTreasuries: TreasuryConfig[] = [\n        {\n          chainId: 11155111,\n          address: '0x1234567890123456789012345678901234567890',\n          gasLimit: 500000,\n          isActive: true\n        },\n        {\n          chainId: 421614,\n          address: '0x9876543210987654321098765432109876543210',\n          gasLimit: 300000,\n          isActive: true\n        }\n      ];\n\n      const mockAssets: AssetConfig[] = [\n        {\n          id: '1',\n          symbol: 'ETH',\n          address: '0x0000000000000000000000000000000000000000',\n          targetAllocation: 50,\n          minBalance: '0.1',\n          isActive: true\n        },\n        {\n          id: '2',\n          symbol: 'USDC',\n          address: '0xA0b86a33E6417fAcff1a42c5FD8F0B1B34f7bdB',\n          targetAllocation: 50,\n          minBalance: '100',\n          isActive: true\n        }\n      ];\n\n      setPriceFeeds(mockPriceFeeds);\n      setTreasuries(mockTreasuries);\n      setAssets(mockAssets);\n    } catch (error) {\n      console.error('Failed to load configurations:', error);\n    }\n  };\n\n  const addPriceFeed = async () => {\n    if (!priceMonitor) {\n      toast.error('Price monitor contract not available');\n      return;\n    }\n\n    if (!newPriceFeed.symbol || !newPriceFeed.address) {\n      toast.error('Please fill in all required fields');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const feedId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes(newPriceFeed.symbol));\n      \n      const tx = await priceMonitor.addPriceFeed(\n        feedId,\n        newPriceFeed.address,\n        newPriceFeed.chainId,\n        newPriceFeed.threshold * 100 // Convert percentage to basis points\n      );\n      \n      await tx.wait();\n      \n      toast.success('Price feed added successfully!');\n      \n      // Add to local state\n      const newFeed: PriceFeedConfig = {\n        id: Date.now().toString(),\n        ...newPriceFeed,\n        isActive: true\n      };\n      setPriceFeeds(prev => [...prev, newFeed]);\n      \n      // Reset form\n      setNewPriceFeed({\n        symbol: '',\n        address: '',\n        chainId: 11155111,\n        threshold: 10\n      });\n    } catch (error: any) {\n      console.error('Failed to add price feed:', error);\n      toast.error(error.message || 'Failed to add price feed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addTreasury = async () => {\n    if (!priceMonitor) {\n      toast.error('Price monitor contract not available');\n      return;\n    }\n\n    if (!newTreasury.address) {\n      toast.error('Please enter treasury address');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const tx = await priceMonitor.addTreasury(\n        newTreasury.chainId,\n        newTreasury.address,\n        newTreasury.gasLimit\n      );\n      \n      await tx.wait();\n      \n      toast.success('Treasury added successfully!');\n      \n      // Add to local state\n      const treasury: TreasuryConfig = {\n        ...newTreasury,\n        isActive: true\n      };\n      setTreasuries(prev => [...prev, treasury]);\n      \n      // Reset form\n      setNewTreasury({\n        chainId: 11155111,\n        address: '',\n        gasLimit: 500000\n      });\n    } catch (error: any) {\n      console.error('Failed to add treasury:', error);\n      toast.error(error.message || 'Failed to add treasury');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addAsset = async () => {\n    if (!treasuryVault) {\n      toast.error('Treasury vault contract not available');\n      return;\n    }\n\n    if (!newAsset.symbol) {\n      toast.error('Please enter asset symbol');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const assetId = ethers.utils.keccak256(ethers.utils.toUtf8Bytes(newAsset.symbol));\n      const minBalance = ethers.utils.parseEther(newAsset.minBalance);\n      \n      const tx = await treasuryVault.addAsset(\n        assetId,\n        newAsset.address,\n        newAsset.targetAllocation * 100, // Convert to basis points\n        minBalance\n      );\n      \n      await tx.wait();\n      \n      toast.success('Asset added successfully!');\n      \n      // Add to local state\n      const asset: AssetConfig = {\n        id: Date.now().toString(),\n        ...newAsset,\n        isActive: true\n      };\n      setAssets(prev => [...prev, asset]);\n      \n      // Reset form\n      setNewAsset({\n        symbol: '',\n        address: '',\n        targetAllocation: 50,\n        minBalance: '0.1'\n      });\n    } catch (error: any) {\n      console.error('Failed to add asset:', error);\n      toast.error(error.message || 'Failed to add asset');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleSystemPause = async () => {\n    if (!treasuryVault) {\n      toast.error('Treasury vault contract not available');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const tx = systemPaused \n        ? await treasuryVault.unpause()\n        : await treasuryVault.pause();\n      \n      await tx.wait();\n      \n      setSystemPaused(!systemPaused);\n      toast.success(`System ${systemPaused ? 'unpaused' : 'paused'} successfully!`);\n    } catch (error: any) {\n      console.error('Failed to toggle system pause:', error);\n      toast.error(error.message || 'Failed to toggle system pause');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getChainName = (chainId: number) => {\n    switch (chainId) {\n      case 1: return 'Ethereum Mainnet';\n      case 5318008: return 'Reactive Network';\n      case 11155111: return 'Ethereum Sepolia';\n      case 421614: return 'Arbitrum Sepolia';\n      default: return `Chain ${chainId}`;\n    }\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        type: 'spring',\n        stiffness: 100,\n        damping: 12,\n      },\n    },\n  };\n\n  if (!active) {\n    return (\n      <div className=\"min-h-[60vh] flex items-center justify-center\">\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className=\"text-center\"\n        >\n          <div className=\"w-16 h-16 bg-reactive-600/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <KeyIcon className=\"w-8 h-8 text-reactive-400\" />\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-100 mb-2\">\n            Admin Access Required\n          </h2>\n          <p className=\"text-gray-400 mb-6\">\n            Connect your wallet to access the admin panel\n          </p>\n        </motion.div>\n      </div>\n    );\n  }\n\n  if (!isOwner) {\n    return (\n      <div className=\"min-h-[60vh] flex items-center justify-center\">\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className=\"text-center\"\n        >\n          <div className=\"w-16 h-16 bg-danger-600/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <ShieldCheckIcon className=\"w-8 h-8 text-danger-400\" />\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-100 mb-2\">\n            Access Denied\n          </h2>\n          <p className=\"text-gray-400 mb-6\">\n            You don't have permission to access the admin panel\n          </p>\n          <p className=\"text-sm text-gray-500\">\n            Current account: {account}\n          </p>\n        </motion.div>\n      </div>\n    );\n  }\n\n  const tabs = [\n    { id: 'price-feeds', name: 'Price Feeds', icon: CogIcon },\n    { id: 'treasuries', name: 'Treasuries', icon: CogIcon },\n    { id: 'assets', name: 'Assets', icon: CogIcon },\n    { id: 'emergency', name: 'Emergency', icon: ExclamationTriangleIcon }\n  ];\n\n  return (\n    <motion.div\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      className=\"space-y-8\"\n    >\n      {/* Header */}\n      <motion.div variants={itemVariants}>\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold gradient-text mb-2\">\n              Admin Panel\n            </h1>\n            <p className=\"text-gray-400\">\n              Configure and manage your cross-chain treasury system\n            </p>\n          </div>\n          <div className=\"mt-4 sm:mt-0\">\n            <div className=\"flex items-center space-x-2 bg-success-600/20 text-success-400 px-3 py-1 rounded-lg\">\n              <CheckCircleIcon className=\"w-4 h-4\" />\n              <span className=\"text-sm font-medium\">Admin Access</span>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Navigation Tabs */}\n      <motion.div variants={itemVariants}>\n        <div className=\"flex space-x-1 bg-gray-800 p-1 rounded-lg\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${\n                activeTab === tab.id\n                  ? 'bg-reactive-600 text-white'\n                  : 'text-gray-400 hover:text-white hover:bg-gray-700'\n              }`}\n            >\n              <tab.icon className=\"w-4 h-4\" />\n              <span>{tab.name}</span>\n            </button>\n          ))}\n        </div>\n      </motion.div>\n\n      {/* Tab Content */}\n      <motion.div variants={itemVariants}>\n        {activeTab === 'price-feeds' && (\n          <div className=\"space-y-6\">\n            {/* Add Price Feed Form */}\n            <div className=\"card\">\n              <div className=\"card-header\">\n                <h3 className=\"text-lg font-semibold text-gray-100 flex items-center space-x-2\">\n                  <PlusIcon className=\"w-5 h-5\" />\n                  <span>Add Price Feed</span>\n                </h3>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Symbol\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={newPriceFeed.symbol}\n                    onChange={(e) => setNewPriceFeed(prev => ({ ...prev, symbol: e.target.value }))}\n                    placeholder=\"ETH/USD\"\n                    className=\"input w-full\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Feed Address\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={newPriceFeed.address}\n                    onChange={(e) => setNewPriceFeed(prev => ({ ...prev, address: e.target.value }))}\n                    placeholder=\"0x...\"\n                    className=\"input w-full\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Chain ID\n                  </label>\n                  <select\n                    value={newPriceFeed.chainId}\n                    onChange={(e) => setNewPriceFeed(prev => ({ ...prev, chainId: Number(e.target.value) }))}\n                    className=\"input w-full\"\n                  >\n                    <option value={11155111}>Ethereum Sepolia</option>\n                    <option value={421614}>Arbitrum Sepolia</option>\n                    <option value={1}>Ethereum Mainnet</option>\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Threshold (%)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={newPriceFeed.threshold}\n                    onChange={(e) => setNewPriceFeed(prev => ({ ...prev, threshold: Number(e.target.value) }))}\n                    min=\"1\"\n                    max=\"50\"\n                    className=\"input w-full\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"mt-4 flex justify-end\">\n                <button\n                  onClick={addPriceFeed}\n                  disabled={loading}\n                  className=\"btn-primary\"\n                >\n                  {loading ? 'Adding...' : 'Add Price Feed'}\n                </button>\n              </div>\n            </div>\n\n            {/* Price Feeds List */}\n            <div className=\"card\">\n              <div className=\"card-header\">\n                <h3 className=\"text-lg font-semibold text-gray-100\">\n                  Configured Price Feeds\n                </h3>\n              </div>\n\n              <div className=\"space-y-3\">\n                {priceFeeds.map((feed) => (\n                  <div key={feed.id} className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-100\">{feed.symbol}</h4>\n                      <p className=\"text-sm text-gray-400\">\n                        {feed.address} • {getChainName(feed.chainId)} • ±{feed.threshold}%\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className={`status-dot ${\n                        feed.isActive ? 'status-active' : 'status-inactive'\n                      }`} />\n                      <button className=\"btn-secondary text-sm\">\n                        <PencilIcon className=\"w-4 h-4\" />\n                      </button>\n                      <button className=\"btn-danger text-sm\">\n                        <TrashIcon className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'treasuries' && (\n          <div className=\"space-y-6\">\n            {/* Add Treasury Form */}\n            <div className=\"card\">\n              <div className=\"card-header\">\n                <h3 className=\"text-lg font-semibold text-gray-100 flex items-center space-x-2\">\n                  <PlusIcon className=\"w-5 h-5\" />\n                  <span>Add Treasury</span>\n                </h3>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Chain ID\n                  </label>\n                  <select\n                    value={newTreasury.chainId}\n                    onChange={(e) => setNewTreasury(prev => ({ ...prev, chainId: Number(e.target.value) }))}\n                    className=\"input w-full\"\n                  >\n                    <option value={11155111}>Ethereum Sepolia</option>\n                    <option value={421614}>Arbitrum Sepolia</option>\n                    <option value={1}>Ethereum Mainnet</option>\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Treasury Address\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={newTreasury.address}\n                    onChange={(e) => setNewTreasury(prev => ({ ...prev, address: e.target.value }))}\n                    placeholder=\"0x...\"\n                    className=\"input w-full\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Gas Limit\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={newTreasury.gasLimit}\n                    onChange={(e) => setNewTreasury(prev => ({ ...prev, gasLimit: Number(e.target.value) }))}\n                    min=\"100000\"\n                    max=\"1000000\"\n                    className=\"input w-full\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"mt-4 flex justify-end\">\n                <button\n                  onClick={addTreasury}\n                  disabled={loading}\n                  className=\"btn-primary\"\n                >\n                  {loading ? 'Adding...' : 'Add Treasury'}\n                </button>\n              </div>\n            </div>\n\n            {/* Treasuries List */}\n            <div className=\"card\">\n              <div className=\"card-header\">\n                <h3 className=\"text-lg font-semibold text-gray-100\">\n                  Configured Treasuries\n                </h3>\n              </div>\n\n              <div className=\"space-y-3\">\n                {treasuries.map((treasury, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-100\">\n                        {getChainName(treasury.chainId)}\n                      </h4>\n                      <p className=\"text-sm text-gray-400\">\n                        {treasury.address} • Gas: {treasury.gasLimit.toLocaleString()}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className={`status-dot ${\n                        treasury.isActive ? 'status-active' : 'status-inactive'\n                      }`} />\n                      <button className=\"btn-secondary text-sm\">\n                        <PencilIcon className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'assets' && (\n          <div className=\"space-y-6\">\n            {/* Add Asset Form */}\n            <div className=\"card\">\n              <div className=\"card-header\">\n                <h3 className=\"text-lg font-semibold text-gray-100 flex items-center space-x-2\">\n                  <PlusIcon className=\"w-5 h-5\" />\n                  <span>Add Asset</span>\n                </h3>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Symbol\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={newAsset.symbol}\n                    onChange={(e) => setNewAsset(prev => ({ ...prev, symbol: e.target.value }))}\n                    placeholder=\"ETH\"\n                    className=\"input w-full\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Token Address\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={newAsset.address}\n                    onChange={(e) => setNewAsset(prev => ({ ...prev, address: e.target.value }))}\n                    placeholder=\"0x... (use 0x0 for ETH)\"\n                    className=\"input w-full\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Target Allocation (%)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={newAsset.targetAllocation}\n                    onChange={(e) => setNewAsset(prev => ({ ...prev, targetAllocation: Number(e.target.value) }))}\n                    min=\"1\"\n                    max=\"100\"\n                    className=\"input w-full\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Minimum Balance\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={newAsset.minBalance}\n                    onChange={(e) => setNewAsset(prev => ({ ...prev, minBalance: e.target.value }))}\n                    placeholder=\"0.1\"\n                    className=\"input w-full\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"mt-4 flex justify-end\">\n                <button\n                  onClick={addAsset}\n                  disabled={loading}\n                  className=\"btn-primary\"\n                >\n                  {loading ? 'Adding...' : 'Add Asset'}\n                </button>\n              </div>\n            </div>\n\n            {/* Assets List */}\n            <div className=\"card\">\n              <div className=\"card-header\">\n                <h3 className=\"text-lg font-semibold text-gray-100\">\n                  Configured Assets\n                </h3>\n              </div>\n\n              <div className=\"space-y-3\">\n                {assets.map((asset) => (\n                  <div key={asset.id} className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-100\">{asset.symbol}</h4>\n                      <p className=\"text-sm text-gray-400\">\n                        {asset.address} • Target: {asset.targetAllocation}% • Min: {asset.minBalance}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className={`status-dot ${\n                        asset.isActive ? 'status-active' : 'status-inactive'\n                      }`} />\n                      <button className=\"btn-secondary text-sm\">\n                        <PencilIcon className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'emergency' && (\n          <div className=\"space-y-6\">\n            {/* Emergency Controls */}\n            <div className=\"card border-danger-500/20\">\n              <div className=\"card-header\">\n                <h3 className=\"text-lg font-semibold text-danger-400 flex items-center space-x-2\">\n                  <ExclamationTriangleIcon className=\"w-5 h-5\" />\n                  <span>Emergency Controls</span>\n                </h3>\n                <p className=\"text-sm text-gray-400 mt-2\">\n                  Use these controls only in emergency situations\n                </p>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-100\">System Pause</h4>\n                    <p className=\"text-sm text-gray-400\">\n                      Pause all automated rebalancing operations\n                    </p>\n                  </div>\n                  <button\n                    onClick={toggleSystemPause}\n                    disabled={loading}\n                    className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-colors duration-200 ${\n                      systemPaused\n                        ? 'bg-success-600 hover:bg-success-700 text-white'\n                        : 'bg-danger-600 hover:bg-danger-700 text-white'\n                    }`}\n                  >\n                    {systemPaused ? (\n                      <>\n                        <PlayIcon className=\"w-4 h-4\" />\n                        <span>Resume</span>\n                      </>\n                    ) : (\n                      <>\n                        <PauseIcon className=\"w-4 h-4\" />\n                        <span>Pause</span>\n                      </>\n                    )}\n                  </button>\n                </div>\n\n                <div className=\"p-4 bg-warning-500/10 border border-warning-500/20 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <ExclamationTriangleIcon className=\"w-5 h-5 text-warning-400 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-medium text-warning-400 mb-1\">Important Notice</h4>\n                      <p className=\"text-sm text-gray-300\">\n                        Emergency controls should only be used when there's a security threat or system malfunction.\n                        Normal operations will be disrupted while the system is paused.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </motion.div>\n    </motion.div>\n  );\n};\n\nexport default Admin;